// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/johannes-kuhfuss/pbreact/service (interfaces: PbApiService)

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api_error "github.com/johannes-kuhfuss/services_utils/api_error"
)

// MockPbApiService is a mock of PbApiService interface.
type MockPbApiService struct {
	ctrl     *gomock.Controller
	recorder *MockPbApiServiceMockRecorder
}

// MockPbApiServiceMockRecorder is the mock recorder for MockPbApiService.
type MockPbApiServiceMockRecorder struct {
	mock *MockPbApiService
}

// NewMockPbApiService creates a new mock instance.
func NewMockPbApiService(ctrl *gomock.Controller) *MockPbApiService {
	mock := &MockPbApiService{ctrl: ctrl}
	mock.recorder = &MockPbApiServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPbApiService) EXPECT() *MockPbApiServiceMockRecorder {
	return m.recorder
}

// GenerateSessionApiToken mocks base method.
func (m *MockPbApiService) GenerateSessionApiToken() api_error.ApiErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSessionApiToken")
	ret0, _ := ret[0].(api_error.ApiErr)
	return ret0
}

// GenerateSessionApiToken indicates an expected call of GenerateSessionApiToken.
func (mr *MockPbApiServiceMockRecorder) GenerateSessionApiToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSessionApiToken", reflect.TypeOf((*MockPbApiService)(nil).GenerateSessionApiToken))
}

// RegisterForNotifications mocks base method.
func (m *MockPbApiService) RegisterForNotifications() api_error.ApiErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterForNotifications")
	ret0, _ := ret[0].(api_error.ApiErr)
	return ret0
}

// RegisterForNotifications indicates an expected call of RegisterForNotifications.
func (mr *MockPbApiServiceMockRecorder) RegisterForNotifications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterForNotifications", reflect.TypeOf((*MockPbApiService)(nil).RegisterForNotifications))
}

// UnregisterForNotifications mocks base method.
func (m *MockPbApiService) UnregisterForNotifications() api_error.ApiErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterForNotifications")
	ret0, _ := ret[0].(api_error.ApiErr)
	return ret0
}

// UnregisterForNotifications indicates an expected call of UnregisterForNotifications.
func (mr *MockPbApiServiceMockRecorder) UnregisterForNotifications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterForNotifications", reflect.TypeOf((*MockPbApiService)(nil).UnregisterForNotifications))
}
